<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xs:schema elementFormDefault="qualified"
       xmlns:xs="http://www.w3.org/2001/XMLSchema"
       xmlns="http://www.pranaframework.org/objects"
       targetNamespace="http://www.pranaframework.org/objects">

  <xs:annotation>
    <xs:documentation><![CDATA[
      Prana Framework 0.5 Schema
      Schema Authors: Ryan Gardner, Erik Westra, Christophe Herreman

      This defines a simple and consistent way of creating a namespace
      of ActionScript objects, managed by a Prana IOCContainer, read by
      XmlObjectDefinitionParser.

      Every attempt has been made to make this scheme comprehensive and correct.

      One thing this schema does not do is allow you to use Spring "Bean" names
      (but that's for my own sanity) - anyone wishing to modify it to allow the use
      of either "objects / object" or "beans / bean" is free to do so.

      Configuring your XML context-configuration like this:

        <?xml version="1.0" encoding="UTF-8" standalone="no"?>

        <objects xmlns="http://www.pranaframework.org/objects"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.pranaframework.org/objects
             http://www.pranaframework.org/schema/objects/prana-objects-0.5.xsd">

          <!-- object and template definitions -->

        </objects>

      Will enable most schema-aware tools to automatically retrieve the schema and provide
      on-the-fly validation and code-completion as you create your context definition.

      The main goal of this schema is to provide easy assistance in creating the file, and
      basic validation of the syntax. Please feel free to provide updates to the Prana team
      if you see any areas to improve.

      ]]>
    </xs:documentation>
  </xs:annotation>

  <xs:group name="objectList">
    <xs:choice>
      <xs:element name="object" type="objectType" />
      <xs:element name="param" type="templateParamType" />
      <xs:element name="array" type="arrayType" />
      <xs:element name="array-collection" type="arrayCollectionType" />
      <xs:element name="dictionary" type="dictionaryType" />
      <xs:element name="ref" type="xs:string" />
    </xs:choice>
  </xs:group>

  <xs:element name="objects" >
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="import" type="importType" />
        <xs:element name="property" type="externalPropertyType" />
        <xs:element name="template" type="templateType" />
        <xs:element name="object" type="objectType" />
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="importType">
    <xs:attribute name="file" type="xs:string" use="required" />
  </xs:complexType>

  <xs:complexType name="externalPropertyType" mixed="true">
    <xs:annotation>
      <xs:documentation> <![CDATA[
        Can be used to load external properties from a file. This is
        similar to how Ant loads external properties.

        <property file="strings.properties" />

        the property file looks like:

        s1=First string
        s2=Second string

        Note: the path to the property file is relative to the path of
        the application context xml file.

        Note: on some servers, the "properties" extension might be
        blocked. You can either allow the extension in the server
        configuration or add an extra "txt" (or other) prefix that is
        allowed to be served:

        <property file="strings.properties.txt" />
        ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:attribute type="xs:string" name="file" use="required"/>
  </xs:complexType>

  <xs:complexType name="templateType">
    <xs:annotation>
      <xs:documentation> <![CDATA[
        A template is used to assist in creation of other objects.
        To use a template, you can specify variables in braces. Here is an example:

        <template id="remoteObject">
          <object class="mx.rpc.remoting.mxml.RemoteObject">
            <property name="destination" value="GenericDestination"/>
            <property name="endpoint" ref="remoteGateway"/>
            <property name="source" value="ApplicationDomain.Services.${serviceClass}"/>
          </object>
        </template>

        and used like:

        <object id="serviceLocator" class="org.springextensions.actionscript.cairngorm.CairngormServiceLocator"
            factory-method="getInstance">
          <property name="assetService" template="remoteObject">
            <param name="serviceClass" value="AssetService"/>
          </property>
          <property name="packageService" template="remoteObject">
            <param name="serviceClass" value="PackageService"/>
          </property>
          <property name="userService" template="remoteObject">
            <param name="serviceClass" value="UserService"/>
          </property>
        </object>
        ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element type="objectType" name="object"/>
    </xs:sequence>
    <xs:attribute type="xs:string" name="id" use="optional"/>
  </xs:complexType>

  <xs:complexType name="constructor-argType" mixed="true">
    <xs:annotation>
      <xs:documentation>Constructor arguments. You can pass in a comma-delimited set of values, or a more complex value.</xs:documentation>
    </xs:annotation>
    <xs:group ref="objectList" minOccurs="0" />
    <xs:attribute name="value" type="xs:string" use="optional"/>
    <xs:attribute name="ref" type="xs:string" use="optional"/>
    <xs:attribute name="template" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="propertyType" mixed="true">
    <xs:group ref="objectList" minOccurs="0" />
    <xs:attribute name="name" type="xs:string" use="optional"/>
    <xs:attribute name="value" type="xs:string" use="optional"/>
    <xs:attribute name="type" type="xs:string" use="optional"/>
    <xs:attribute name="ref" type="xs:string" use="optional"/>
    <xs:attribute name="template" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="methodInvocationType">
    <xs:sequence>
      <xs:element name="arg" type="argType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="argType" mixed="true">
    <xs:group ref="objectList" minOccurs="0" />
    <xs:attribute name="value" type="xs:string" use="optional"/>
    <xs:attribute name="ref" type="xs:string" use="optional"/>
    <xs:attribute name="template" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="dictionaryType">
    <xs:annotation>
      <xs:documentation><![CDATA[
        A dictionary contains a list properties specified like this:

        <property name="level">
          <dictionary>
            <entry>
              <key>a key</key>
              <value>a</value>
            </entry>
            <entry>
              <key>another key</key>
              <value>1</value>
            </entry>
            <entry>
              <key>true</key>
              <value>
                <array>
                  <value>b</value>
                  <value>c</value>
                </array>
              </value>
            </entry>
          </dictionary>
        </property>
        ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element type="entryType" name="entry" maxOccurs="unbounded" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="entryType" mixed="true">
    <xs:choice>
      <xs:element name="key" minOccurs="0">
        <xs:complexType mixed="true">
          <xs:choice>
            <xs:element type="arrayType" name="array" minOccurs="0" />
            <xs:element type="xs:string" name="ref" minOccurs="0"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="value" minOccurs="0">
        <xs:complexType mixed="true">
          <xs:choice>
            <xs:element type="arrayType" name="array" minOccurs="0" />
            <xs:element type="xs:string" name="ref" minOccurs="0"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:choice>
    <xs:attribute type="xs:string" name="key" use="optional"/>
    <xs:attribute type="xs:string" name="value" use="optional"/>
  </xs:complexType>

  <xs:complexType name="valueType" mixed="true">
    <xs:group ref="objectList" minOccurs="0" />
    <xs:attribute name="type" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="keyType">
    <xs:sequence>
      <xs:element type="arrayType" name="array" minOccurs="0" xmlns:objs="http://www.pranaframework.org/objs"/>
      <xs:element type="xs:string" name="ref" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="arrayType">
    <xs:choice>
      <xs:element name="value" type="valueType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="ref" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="object" type="objectType" minOccurs="0" maxOccurs="unbounded" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="arrayCollectionType">
    <xs:annotation>
      <xs:documentation>The array-collection contains a list of value nodes. Each value node contains a string.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="value" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="objectType" mixed="true">
    <xs:annotation>
      <xs:documentation xml:lang="en">The Object type defines the basic Object that is injected by the IoC container.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="property" type="propertyType" minOccurs="0" maxOccurs="unbounded" />
      <xs:element name="constructor-arg" type="constructor-argType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="param" type="templateParamType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="method-invocation" type="methodInvocationType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:choice>
    <xs:attribute type="xs:string" name="class" use="optional"/>
    <xs:attribute type="xs:string" name="id" use="optional"/>
    <xs:attribute type="xs:string" name="factory-method" use="optional"/>
    <xs:attribute name="scope" use="optional">
      <xs:simpleType>
        <xs:annotation>
          <xs:documentation>Scope can be either prototype or singleton.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="prototype"/>
          <xs:enumeration value="singleton"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="lazy-init" type="xs:boolean" use="optional"/>
    <xs:attribute name="init-method" type="xs:string" use="optional"/>
    <xs:attribute name="singleton" type="xs:boolean" use="optional"/>
    <xs:attribute name="template" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="templateParamType">
    <xs:annotation>
      <xs:documentation>
        Template parameters have a name and a value. Currently only string replacement for parameter values is
        allowed.
      </xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="name" use="required"/>
        <xs:attribute type="xs:string" name="value" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

</xs:schema>
